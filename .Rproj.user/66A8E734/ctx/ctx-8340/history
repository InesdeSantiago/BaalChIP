install.packages("devtools")
install.packages("roxygen")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
install_github(devtools, "hadley")
install_github("devtools", "hadley")
load_all()
library(devetools)
library(devtools)
library(roxygen2)
load_all()
load_all()
load_all()
library(BaalChIP)
library(BaalChIP)
?PileUpParam
library(Rsamtools)
?PileUpParam
?pileup
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(RTN)
library(GreyListChIP)
library(chIPQC)
library(ChIPQC)
library(BaalChIP)
library(BaalChIP)
library(RTN)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
samplesheet <- "/Users/santia01/Dropbox/FromHome/baal_package/tests/test1.tsv"
hets <- c("MCF10"="/Users/santia01/Dropbox/FromHome/baal_package/tests/Get_example_data/MCF10_hetSNP.txt",
"GM12891"="/Users/santia01/Dropbox/FromHome/baal_package/tests/Get_example_data/GM12891_hetSNP.txt")
save(samplesheet, )
path <- system.file("extra", package="BaalChIP")
path
path <- system.file("extra", package="BaalChIP")
path
path <- system.file("extra/example.tsv", package="BaalChIP")
path
library(GreyListChIP)
path <- system.file("extra", package="GreyListChIP")
path
library(BaalChIP)
path <- system.file("extra/example.tsv", package="BaalChIP")
path
library(BaalChIP)
library(BaalChIP)
path <- system.file("extra/example.tsv", package="BaalChIP")
path
path <- system.file("extra", package="BaalChIP")
path
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
samples
:
\itemize{}
#' bed_name: path for BED file containing peaks for sample.
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
system.file("extra", package="BaalChIP")
system.file("test", package="BaalChIP")
system.file("test/test.csv", package="BaalChIP")
system.file("test/", package="BaalChIP")
path(system.file("test/", package="BaalChIP"), "test.csv")
library(BaalChIP)
samplesheet <- file.path(system.file("test",package="BaalChIP"), "/test1.tsv")
samplesheet
samplesheet <- file.path(system.file("test",package="BaalChIP"), "test1.tsv")
hets <- c("MCF10"=file.path(system.file("test",package="BaalChIP"), "MCF10_hetSNP.txt"),
"GM12891"=file.path(system.file("test",package="BaalChIP"), "GM12891_hetSNP.txt"))
hets
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
samplesheet <- file.path(system.file("test",package="BaalChIP"), "example.tsv")
hets <- c("MCF10"=file.path(system.file("test",package="BaalChIP"), "MCF10_hetSNP.txt"),
"GM12891"=file.path(system.file("test",package="BaalChIP"), "GM12891_hetSNP.txt"))
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
print(rownr)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
library(GRanges)
library(GenomicRanges)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(GenomicRanges)
library(BaalChIP)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
samplesheet
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- QCfilter(res, RegionsToFilter=c("blacklist","pickrell2011_seq.cov1"), RegionsToKeep=c("UniqueMapability50bp"))
data(blacklist)
data(pickrell2001_seq.cov1)
data(pickrell2001_seq.cov1, package="BaalChIP")
data(blacklist)
blacklist
library(BaalChIP)
library(BaalChIP)
load("~/Dropbox/FromHome/baal_package/BaalChIP/data/pickrell2010cov1_hg19.RData")
res <- QCfilter(res, RegionsToFilter=c("blacklist_hg19","pickrell2011cov1_hg19"), RegionsToKeep=c("UniqueMappability50bp"))
library(BaalChIP)
data(blacklist_hg19)
data(pickrell2011cov1_hg19)
data(UniqueMappability50bp)
data(UniqueMappability50bp_hg19)
blacklist_hg19
blacklist_hg19 <- blacklist
pickrell2011cov1_hg19 <- pickrell2011_seq.cov1
UniqueMappability50bp_hg19 <- UniqueMapability50bp
save(blacklist_hg19, "Users/santia01/Dropbox/FromHome/baal_package/BaalChIP/data/blacklist_hg19.RData")
save(blacklist_hg19, file = "Users/santia01/Dropbox/FromHome/baal_package/BaalChIP/data/blacklist_hg19.RData")
save(blacklist_hg19, file = "/Users/santia01/Dropbox/FromHome/baal_package/BaalChIP/data/blacklist_hg19.RData")
save(pickrell2011cov1_hg19, file="/Users/santia01/Dropbox/FromHome/baal_package/BaalChIP/data/pickrell2011cov1_hg19")
save(UniqueMappability50bp_hg19, file="/Users/santia01/Dropbox/FromHome/baal_package/BaalChIP/data/UniqueMappability50bp_hg19")
data(blacklist_hg19)
data(pickrell2011cov1_hg19)
data(UniqueMappability50bp)
res <- QCfilter(res, RegionsToFilter=c("blacklist_hg19","pickrell2011cov1_hg19"), RegionsToKeep=c("UniqueMappability50bp_hg19"))
library(BaalChIP)
data(UniqueMappability50bp_hg19)
res <- QCfilter(res, RegionsToFilter=c("blacklist_hg19","pickrell2011cov1_hg19"), RegionsToKeep=c("UniqueMappability50bp_hg19"))
res <- mergeReps(res)
res <- mergeReps(res)
print("1")
library(BaalChIP)
res <- mergeReps(res)
library(BaalChIP)
res <- mergeReps(res)
library(BaalChIP)
res <- mergeReps(res)
#print(head(values(granges)))
library(BaalChIP)
res <- mergeReps(res)
library(BaalChIP)
res <- mergeReps(res)
library(BaalChIP)
res <- mergeReps(res)
library(BaalChIP)
res <- mergeReps(res)
#as.data.frame does not work
res <- filter1allele(res)
res <- getASB(res, Iter=5000, conf_level=0.95)
summaryASB(res)
library(BaalChIP)
library(BaalChIP)
res <- mergeReps(res)
res <- filter1allele(res)
library(BaalChIP)
getwd()
setwd(system.file("test",package="BaalChIP"))
getwd()
library(BaalChIP)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
library(BaalChIP)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
data(blacklist_hg19)
data(pickrell2011cov1_hg19)
data(UniqueMappability50bp_hg19)
res <- QCfilter(res, RegionsToFilter=c("blacklist_hg19","pickrell2011cov1_hg19"), RegionsToKeep=c("UniqueMappability50bp_hg19"))
#initialize
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
library(BaalChIP)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
data(blacklist_hg19)
data(pickrell2011cov1_hg19)
data(UniqueMappability50bp_hg19)
res <- QCfilter(res, RegionsToFilter=c("blacklist_hg19","pickrell2011cov1_hg19"), RegionsToKeep=c("UniqueMappability50bp_hg19"))
res <- mergeReps(res)
res@mergedCounts
res@samples
res@alleleCounts
res_per_bam <- res@alleleCounts
cells <- names(res_per_bam)
cells
res_merged <- list()
res_merged <- lapply(cells, function(x) {res_merged[[x]] <- list()})
names(res_merged) <- cells
cellname = "MCF10"
lastset <- lapply(res_per_bam[[cellname]], function(x) {return(x[[length(x)]])})
lastset
names(res_per_bam[[cellname]][[1]])
m1 <- get_mergedcounts(celldata=lastset, metadata=samples[samples$cell_name==cellname,], includeForeign=includeForeign)
getdframe <- function(granges) {
#I had to do this function because as.data.frame is not working for some obscure reason and I am too tired to figure it out
dframe <- data.frame("seqnames"=as.character(seqnames(granges)),
"start"=start(granges),
"end"=end(granges),
"ID"=values(granges)[["ID"]],
"REF"=values(granges)[["REF"]],
"ALT"=values(granges)[["ALT"]],
"REF.counts"=values(granges)[["REF.counts"]],
"ALT.counts"=values(granges)[["ALT.counts"]],
"Total.counts"=values(granges)[["Total.counts"]],
"Foreign.counts"=values(granges)[["Foreign.counts"]],
"AR.counts"=values(granges)[["AR"]],stringsAsFactors = FALSE)
rownames(dframe) <- names(granges)
return(dframe)
}
res <- mergeReps(res)
library(BaalChIP)
res@samples
library(BaalChIP)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
data(blacklist_hg19)
data(pickrell2011cov1_hg19)
data(UniqueMappability50bp_hg19)
res <- QCfilter(res, RegionsToFilter=c("blacklist_hg19","pickrell2011cov1_hg19"), RegionsToKeep=c("UniqueMappability50bp_hg19"))
res <- mergeReps(res)
res <- filter1allele(res)
res <- getASB(res, Iter=5000, conf_level=0.95)
res@mergedCounts
names(res@mergedCounts
)
names(res@mergedCounts[[1]])
sapply(res@mergedCounts[[1]], nrow)
summaryASB(res)
plotQC(res)
plotQC(res,"boxplot")
plotQC(res,"pie")
summaryQC(res)
summaryASB(res)
res_merged <- res@merdegCounts[[1]][[1]]
res_merged <- res@mergedCounts[[1]][[1]]
mergedcounts <- res@mergedCounts[[1]][[1]]
REFsums <- rowSums(mergedcounts[,grepl("REF", colnames(mergedcounts))], na.rm=T)
ALTsums <- rowSums(mergedcounts[,grepl("ALT", colnames(mergedcounts))], na.rm=T)
REFsums
ALTsums
save(res, "~/Dropbox/FromHome/baal_package/BaalChIP/data/baalObject.RData")
save(baalObject, file="~/Dropbox/FromHome/baal_package/BaalChIP/data/baalObject.RData")
BaalObject <- res
save(BaalObject, file="~/Dropbox/FromHome/baal_package/BaalChIP/data/baalObject.RData")
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
#retrieve alleleCounts for one BAM file:
counts <- BaalChIP.get(res, "alleleCountsPerBam")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
#retrieve alleleCounts for one BAM file:
counts <- BaalChIP.get(res, "alleleCountsPerBam")
counts
names(counts)
names(counts[["MCF10"]])
counts[["MCF10"]][[1]]
library(BaalChIP)
library(BaalChIP)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
setwd(system.file("test",package="BaalChIP"))
library(BaalChIP)
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
data(blacklist_hg19)
library(BaalChIP)
counts <- BaalChIP.get(res, "alleleCountsPerBam")
names(counts)
names(counts[["MCF10"]])
names(counts[["MCF10"]][[1]])
res <- mergeReps(res)
res <- mergePerGroup(res)
library(BaalChIP)
res <- mergePerGroup(res)
#retrieve mergedCounts:
counts <- BaalChIP.get(res, "mergedCounts")
library(BaalChIP)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
data(blacklist_hg19)
data(pickrell2011cov1_hg19)
data(UniqueMappability50bp_hg19)
res <- QCfilter(res,
RegionsToFilter=list("blacklist"=blacklist_hg19, "highcoverage"=pickrell2011cov1_hg19),
RegionsToKeep=list("UniqueMappability"=UniqueMappability50bp_hg19))
counts <- BaalChIP.get(res, "alleleCountsPerBam")
#alleleCounts are grouped by bam_name and group_name:
names(counts)
names(counts[["MCF10"]])
#check out the result for one of the bam files:
counts[["MCF10"]][[1]]
res <- mergePerGroup(res)
counts <- BaalChIP.get(res, "mergedCounts")
names(counts)
head(counts[[1]])
sapply(counts, dim)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- BaalChIP.QC(res)
library(BaalChIP)
res <- BaalChIP.QC(res)
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- BaalChIP.QC(res)
library(BaalChIP)
res <- getASB(res)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- BaalChIP.QC(res)
res <- getASB(res)
library(BaalChIP)
data(BaalObject)
BaalChIP.get("samples")
BaalChIP.get(BaalObject,"samples")
BaalChIP.get(BaalObject,"param")
counts <- BaalChIP.get(BaalObject,"alleleCountsPerBam")
counts[["MCF10"]][[1]]
counts <- BaalChIP.get(BaalObject,"mergedCounts")
head(counts[[1]])
res <- BaalChIP.report(BaalObject)
head(res)
report <- res
names(report)
head(report[["MCF10"]])
library(BaalChIP)
library(BaalChIP)
setwd(system.file("test",package="BaalChIP"))
samplesheet <- "example.tsv"
hets <- c("MCF10"="MCF10_hetSNP.txt", "GM12891"="GM12891_hetSNP.txt")
res <- new("BaalChIP", samplesheet=samplesheet, hets=hets)
res <- alleleCounts(res, min_base_quality=10, min_mapq=15)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
library(BaalChIP)
examples(alleleCounts)
example(alleleCounts)
example(QCfilter)
library(BaalChIP)
example(BaalChIP.get)
example(BaalChIP.report)
example(plotQC)
library(BaalChIP)
source("http://bioconductor.org/biocLite.R")
biocLite("Rsamtools")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicAlignments")
source("http://bioconductor.org/biocLite.R")
biocLite("coda")
source("http://bioconductor.org/biocLite.R")
biocLite("doParallel")
source("http://bioconductor.org/biocLite.R")
biocLite("ggplot2")
source("http://bioconductor.org/biocLite.R")
biocLite("knitr")
